# Generated from project.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from antlr_denter.DenterHelper import DenterHelper
from projectParser import projectParser


def serializedATN():
    return [
        4,0,16,197,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,
        1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,6,4,6,61,8,6,11,6,12,6,62,1,6,1,6,1,7,1,7,5,7,69,8,7,10,7,
        12,7,72,9,7,3,7,74,8,7,1,7,1,7,1,7,5,7,79,8,7,10,7,12,7,82,9,7,3,
        7,84,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,95,8,8,1,9,1,9,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        3,10,125,8,10,1,11,1,11,3,11,129,8,11,1,11,1,11,1,11,5,11,134,8,
        11,10,11,12,11,137,9,11,1,12,4,12,140,8,12,11,12,12,12,141,1,12,
        4,12,145,8,12,11,12,12,12,146,3,12,149,8,12,1,13,4,13,152,8,13,11,
        13,12,13,153,1,14,1,14,5,14,158,8,14,10,14,12,14,161,9,14,1,14,1,
        14,1,14,1,14,1,15,3,15,168,8,15,1,15,1,15,5,15,172,8,15,10,15,12,
        15,175,9,15,1,15,5,15,178,8,15,10,15,12,15,181,9,15,1,15,1,15,5,
        15,185,8,15,10,15,12,15,188,9,15,1,15,5,15,191,8,15,10,15,12,15,
        194,9,15,3,15,196,8,15,0,0,16,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,1,0,5,1,0,32,32,4,
        0,37,37,42,43,45,45,47,47,1,0,97,122,1,0,65,90,1,0,48,57,231,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,1,33,1,0,0,0,3,36,1,0,0,0,5,38,1,0,0,0,7,41,1,0,0,0,9,46,1,0,
        0,0,11,52,1,0,0,0,13,60,1,0,0,0,15,73,1,0,0,0,17,94,1,0,0,0,19,96,
        1,0,0,0,21,124,1,0,0,0,23,128,1,0,0,0,25,148,1,0,0,0,27,151,1,0,
        0,0,29,155,1,0,0,0,31,195,1,0,0,0,33,34,5,105,0,0,34,35,5,102,0,
        0,35,2,1,0,0,0,36,37,5,40,0,0,37,4,1,0,0,0,38,39,5,41,0,0,39,40,
        5,58,0,0,40,6,1,0,0,0,41,42,5,101,0,0,42,43,5,108,0,0,43,44,5,105,
        0,0,44,45,5,102,0,0,45,8,1,0,0,0,46,47,5,101,0,0,47,48,5,108,0,0,
        48,49,5,115,0,0,49,50,5,101,0,0,50,51,5,58,0,0,51,10,1,0,0,0,52,
        53,5,119,0,0,53,54,5,104,0,0,54,55,5,105,0,0,55,56,5,108,0,0,56,
        57,5,101,0,0,57,58,5,40,0,0,58,12,1,0,0,0,59,61,7,0,0,0,60,59,1,
        0,0,0,61,62,1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,64,1,0,0,0,64,
        65,6,6,0,0,65,14,1,0,0,0,66,74,3,23,11,0,67,69,3,27,13,0,68,67,1,
        0,0,0,69,72,1,0,0,0,70,68,1,0,0,0,70,71,1,0,0,0,71,74,1,0,0,0,72,
        70,1,0,0,0,73,66,1,0,0,0,73,70,1,0,0,0,74,75,1,0,0,0,75,83,3,19,
        9,0,76,84,3,23,11,0,77,79,3,27,13,0,78,77,1,0,0,0,79,82,1,0,0,0,
        80,78,1,0,0,0,80,81,1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,0,83,76,1,
        0,0,0,83,80,1,0,0,0,84,16,1,0,0,0,85,86,5,43,0,0,86,95,5,61,0,0,
        87,88,5,45,0,0,88,95,5,61,0,0,89,90,5,42,0,0,90,95,5,61,0,0,91,92,
        5,47,0,0,92,95,5,61,0,0,93,95,5,61,0,0,94,85,1,0,0,0,94,87,1,0,0,
        0,94,89,1,0,0,0,94,91,1,0,0,0,94,93,1,0,0,0,95,18,1,0,0,0,96,97,
        7,1,0,0,97,20,1,0,0,0,98,125,5,60,0,0,99,100,5,60,0,0,100,125,5,
        61,0,0,101,125,5,62,0,0,102,103,5,62,0,0,103,125,5,61,0,0,104,105,
        5,61,0,0,105,125,5,61,0,0,106,107,5,33,0,0,107,125,5,61,0,0,108,
        109,5,65,0,0,109,110,5,78,0,0,110,125,5,68,0,0,111,112,5,79,0,0,
        112,125,5,82,0,0,113,114,5,78,0,0,114,115,5,79,0,0,115,125,5,84,
        0,0,116,117,5,97,0,0,117,118,5,110,0,0,118,125,5,100,0,0,119,120,
        5,111,0,0,120,125,5,114,0,0,121,122,5,110,0,0,122,123,5,111,0,0,
        123,125,5,116,0,0,124,98,1,0,0,0,124,99,1,0,0,0,124,101,1,0,0,0,
        124,102,1,0,0,0,124,104,1,0,0,0,124,106,1,0,0,0,124,108,1,0,0,0,
        124,111,1,0,0,0,124,113,1,0,0,0,124,116,1,0,0,0,124,119,1,0,0,0,
        124,121,1,0,0,0,125,22,1,0,0,0,126,129,3,25,12,0,127,129,5,95,0,
        0,128,126,1,0,0,0,128,127,1,0,0,0,129,135,1,0,0,0,130,134,3,25,12,
        0,131,134,5,95,0,0,132,134,3,27,13,0,133,130,1,0,0,0,133,131,1,0,
        0,0,133,132,1,0,0,0,134,137,1,0,0,0,135,133,1,0,0,0,135,136,1,0,
        0,0,136,24,1,0,0,0,137,135,1,0,0,0,138,140,7,2,0,0,139,138,1,0,0,
        0,140,141,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,149,1,0,0,
        0,143,145,7,3,0,0,144,143,1,0,0,0,145,146,1,0,0,0,146,144,1,0,0,
        0,146,147,1,0,0,0,147,149,1,0,0,0,148,139,1,0,0,0,148,144,1,0,0,
        0,149,26,1,0,0,0,150,152,7,4,0,0,151,150,1,0,0,0,152,153,1,0,0,0,
        153,151,1,0,0,0,153,154,1,0,0,0,154,28,1,0,0,0,155,159,5,35,0,0,
        156,158,9,0,0,0,157,156,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,
        159,160,1,0,0,0,160,162,1,0,0,0,161,159,1,0,0,0,162,163,3,31,15,
        0,163,164,1,0,0,0,164,165,6,14,0,0,165,30,1,0,0,0,166,168,5,13,0,
        0,167,166,1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,173,5,10,0,
        0,170,172,5,9,0,0,171,170,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,
        0,173,174,1,0,0,0,174,179,1,0,0,0,175,173,1,0,0,0,176,178,5,32,0,
        0,177,176,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,
        0,180,196,1,0,0,0,181,179,1,0,0,0,182,186,5,10,0,0,183,185,5,9,0,
        0,184,183,1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,
        0,187,192,1,0,0,0,188,186,1,0,0,0,189,191,5,32,0,0,190,189,1,0,0,
        0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,196,1,0,0,
        0,194,192,1,0,0,0,195,167,1,0,0,0,195,182,1,0,0,0,196,32,1,0,0,0,
        22,0,62,70,73,80,83,94,124,128,133,135,141,146,148,153,159,167,173,
        179,186,192,195,1,6,0,0
    ]

class projectLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    WS = 7
    ARITHMETIC = 8
    ASSIGN = 9
    OPERATORS = 10
    CONDITIONAL = 11
    IDENTIFIER = 12
    LETTERS = 13
    DIGITS = 14
    COMMENT = 15
    NEWLINE = 16

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'('", "'):'", "'elif'", "'else:'", "'while('" ]

    symbolicNames = [ "<INVALID>",
            "WS", "ARITHMETIC", "ASSIGN", "OPERATORS", "CONDITIONAL", "IDENTIFIER", 
            "LETTERS", "DIGITS", "COMMENT", "NEWLINE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "WS", 
                  "ARITHMETIC", "ASSIGN", "OPERATORS", "CONDITIONAL", "IDENTIFIER", 
                  "LETTERS", "DIGITS", "COMMENT", "NEWLINE" ]

    grammarFileName = "project.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    class MyCoolDenter(DenterHelper):
        def __init__(self, lexer, nl_token, indent_token, dedent_token, ignore_eof):
            super().__init__(nl_token, indent_token, dedent_token, ignore_eof)
            self.lexer: projectLexer = lexer

        def pull_token(self):
            return super(projectLexer, self.lexer).nextToken()

    denter = None

    def nextToken(self):
        if not self.denter:
            self.denter = self.MyCoolDenter(self, self.NEWLINE, projectParser.INDENT, projectParser.DEDENT, 1)
        return self.denter.next_token()



