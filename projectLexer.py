# Generated from project.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,7,64,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,1,0,1,0,1,1,4,1,19,8,1,11,1,12,1,20,1,1,1,1,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,3,2,34,8,2,1,3,1,3,1,4,4,4,39,8,4,11,4,12,
        4,40,1,4,4,4,44,8,4,11,4,12,4,45,3,4,48,8,4,1,5,4,5,51,8,5,11,5,
        12,5,52,1,6,3,6,56,8,6,1,6,1,6,5,6,60,8,6,10,6,12,6,63,9,6,0,0,7,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,1,0,5,2,0,9,9,32,32,4,0,37,37,42,43,
        45,45,47,47,1,0,97,122,1,0,65,90,1,0,48,57,74,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,1,15,1,0,0,0,3,18,1,0,0,0,5,33,1,0,0,0,7,35,1,0,0,0,9,47,1,0,
        0,0,11,50,1,0,0,0,13,55,1,0,0,0,15,16,5,95,0,0,16,2,1,0,0,0,17,19,
        7,0,0,0,18,17,1,0,0,0,19,20,1,0,0,0,20,18,1,0,0,0,20,21,1,0,0,0,
        21,22,1,0,0,0,22,23,6,1,0,0,23,4,1,0,0,0,24,25,5,43,0,0,25,34,5,
        61,0,0,26,27,5,45,0,0,27,34,5,61,0,0,28,29,5,42,0,0,29,34,5,61,0,
        0,30,31,5,47,0,0,31,34,5,61,0,0,32,34,5,61,0,0,33,24,1,0,0,0,33,
        26,1,0,0,0,33,28,1,0,0,0,33,30,1,0,0,0,33,32,1,0,0,0,34,6,1,0,0,
        0,35,36,7,1,0,0,36,8,1,0,0,0,37,39,7,2,0,0,38,37,1,0,0,0,39,40,1,
        0,0,0,40,38,1,0,0,0,40,41,1,0,0,0,41,48,1,0,0,0,42,44,7,3,0,0,43,
        42,1,0,0,0,44,45,1,0,0,0,45,43,1,0,0,0,45,46,1,0,0,0,46,48,1,0,0,
        0,47,38,1,0,0,0,47,43,1,0,0,0,48,10,1,0,0,0,49,51,7,4,0,0,50,49,
        1,0,0,0,51,52,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,0,53,12,1,0,0,0,
        54,56,5,13,0,0,55,54,1,0,0,0,55,56,1,0,0,0,56,57,1,0,0,0,57,61,5,
        10,0,0,58,60,5,32,0,0,59,58,1,0,0,0,60,63,1,0,0,0,61,59,1,0,0,0,
        61,62,1,0,0,0,62,14,1,0,0,0,63,61,1,0,0,0,9,0,20,33,40,45,47,52,
        55,61,1,6,0,0
    ]

class projectLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    WS = 2
    ASSIGN = 3
    OPERATORS = 4
    LETTERS = 5
    DIGITS = 6
    NEWLINE = 7

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'_'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "ASSIGN", "OPERATORS", "LETTERS", "DIGITS", "NEWLINE" ]

    ruleNames = [ "T__0", "WS", "ASSIGN", "OPERATORS", "LETTERS", "DIGITS", 
                  "NEWLINE" ]

    grammarFileName = "project.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


