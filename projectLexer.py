# Generated from project.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,7,74,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,1,0,4,0,17,8,0,11,0,12,0,18,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,3,1,32,8,1,1,2,1,2,1,3,1,3,3,3,38,8,3,1,3,1,3,1,3,
        5,3,43,8,3,10,3,12,3,46,9,3,1,4,4,4,49,8,4,11,4,12,4,50,1,4,4,4,
        54,8,4,11,4,12,4,55,3,4,58,8,4,1,5,4,5,61,8,5,11,5,12,5,62,1,6,3,
        6,66,8,6,1,6,1,6,5,6,70,8,6,10,6,12,6,73,9,6,0,0,7,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,1,0,5,2,0,9,9,32,32,4,0,37,37,42,43,45,45,47,47,
        1,0,97,122,1,0,65,90,1,0,48,57,88,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,1,16,1,0,
        0,0,3,31,1,0,0,0,5,33,1,0,0,0,7,37,1,0,0,0,9,57,1,0,0,0,11,60,1,
        0,0,0,13,65,1,0,0,0,15,17,7,0,0,0,16,15,1,0,0,0,17,18,1,0,0,0,18,
        16,1,0,0,0,18,19,1,0,0,0,19,20,1,0,0,0,20,21,6,0,0,0,21,2,1,0,0,
        0,22,23,5,43,0,0,23,32,5,61,0,0,24,25,5,45,0,0,25,32,5,61,0,0,26,
        27,5,42,0,0,27,32,5,61,0,0,28,29,5,47,0,0,29,32,5,61,0,0,30,32,5,
        61,0,0,31,22,1,0,0,0,31,24,1,0,0,0,31,26,1,0,0,0,31,28,1,0,0,0,31,
        30,1,0,0,0,32,4,1,0,0,0,33,34,7,1,0,0,34,6,1,0,0,0,35,38,3,9,4,0,
        36,38,5,95,0,0,37,35,1,0,0,0,37,36,1,0,0,0,38,44,1,0,0,0,39,43,3,
        9,4,0,40,43,5,95,0,0,41,43,3,11,5,0,42,39,1,0,0,0,42,40,1,0,0,0,
        42,41,1,0,0,0,43,46,1,0,0,0,44,42,1,0,0,0,44,45,1,0,0,0,45,8,1,0,
        0,0,46,44,1,0,0,0,47,49,7,2,0,0,48,47,1,0,0,0,49,50,1,0,0,0,50,48,
        1,0,0,0,50,51,1,0,0,0,51,58,1,0,0,0,52,54,7,3,0,0,53,52,1,0,0,0,
        54,55,1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,58,1,0,0,0,57,48,1,
        0,0,0,57,53,1,0,0,0,58,10,1,0,0,0,59,61,7,4,0,0,60,59,1,0,0,0,61,
        62,1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,12,1,0,0,0,64,66,5,13,
        0,0,65,64,1,0,0,0,65,66,1,0,0,0,66,67,1,0,0,0,67,71,5,10,0,0,68,
        70,5,32,0,0,69,68,1,0,0,0,70,73,1,0,0,0,71,69,1,0,0,0,71,72,1,0,
        0,0,72,14,1,0,0,0,73,71,1,0,0,0,12,0,18,31,37,42,44,50,55,57,62,
        65,71,1,6,0,0
    ]

class projectLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    ASSIGN = 2
    OPERATORS = 3
    IDENTIFIER = 4
    LETTERS = 5
    DIGITS = 6
    NEWLINE = 7

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "WS", "ASSIGN", "OPERATORS", "IDENTIFIER", "LETTERS", "DIGITS", 
            "NEWLINE" ]

    ruleNames = [ "WS", "ASSIGN", "OPERATORS", "IDENTIFIER", "LETTERS", 
                  "DIGITS", "NEWLINE" ]

    grammarFileName = "project.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


